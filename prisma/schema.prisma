generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model User {
  user_id     String       @id() @default(uuid())
  name        String
  email       String
  password    String
  username    String       @unique()
  role        Role
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt()
  courses     Course[]
  lessonProgresses LessonProgress[]
  enrollments Enrollment[]
  reviews     Review[]
}

model Course {
  course_id    String       @id() @default(uuid())
  title        String
  description  String
  price        Int
  isReady      Boolean      @default(false)
  instructorId String
  instructor   User         @relation(fields: [instructorId], references: [user_id], onDelete: Cascade)
  sections     Section[]
  enrollments  Enrollment[]
  reviews      Review[]
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt()

  @@index([instructorId])

}

model Enrollment {
  enrollment_id String   @id() @default(uuid())
  userId        String
  courseId      String
  completed     Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  course        Course   @relation(fields: [courseId], references: [course_id], onDelete: Cascade)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt()

  @@unique([userId, courseId])
}

model Section {
  section_id String   @id @default(uuid())
  title      String
  description String?
  courseId   String
  course     Course   @relation(fields: [courseId], references: [course_id], onDelete: Cascade)
  lessons    Lesson[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  @@index([courseId])
}

model Lesson {
  lesson_id  String   @id @default(uuid())
  title      String
  description String?
  videoUrl   String
  sectionId  String
  lessonProgresses LessonProgress[]
  section    Section  @relation(fields: [sectionId], references: [section_id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
  
  @@index([sectionId])
}


model LessonProgress{
  id String @id() @default(uuid())
  userId String
  lessonId String
  user User @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [lesson_id], onDelete: Cascade)
  completed Boolean @default(false)

@@unique([userId, lessonId])
}

model Review {
  review_id  String   @id @default(uuid())
  userId     String
  courseId   String
  rating     Decimal      @db.Decimal(3,1)
  user       User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [course_id], onDelete: Cascade)
  created_at DateTime @default(now())

  @@unique([userId, courseId])
}
